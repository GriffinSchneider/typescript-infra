/* eslint-disable max-len, @typescript-eslint/array-type, @typescript-eslint/no-use-before-define, no-use-before-define */

import * as t from 'io-ts';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { DateFromISOString } from 'io-ts-types/lib/Date/DateFromISOString';
import { Router as BaseRouter } from '@griffins/api-server-support';
import { {{{apiClassName}}}Context } from '../context';

{{#each objectModels}}
{{> modelTemplate}}
{{/each}}
{{> routeInfoTemplate}}

export class Router extends BaseRouter<Context> {
  public registerRoute<
    RouteName extends keyof typeof routeInfo,
    InputType extends t.TypeOf<typeof routeInfo[RouteName]['inputCodec']>,
    ResponseType extends t.TypeOf<typeof routeInfo[RouteName]['responseCodec']>
  >(
    routeName: RouteName,
    handler: (args: InputType, ctx: Context) => Promise<ResponseType>,
  ): void {
    this.routes.push(service => {
      const { method, path, inputLocations, inputCodec, responseCodec } = routeInfo[routeName];
      // This doesn't typecheck without the 'as any' due to some confusing generics stuff that I don't understand.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      service.registerRoute(method, path, inputLocations, inputCodec as any, responseCodec as any, handler);
    });
  }
}
